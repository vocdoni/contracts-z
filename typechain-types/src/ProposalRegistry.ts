/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ProposalRegistry {
  export type VoteOptionsStruct = {
    uniqueValues: boolean;
    maxCount: BigNumberish;
    maxValue: BigNumberish;
    minValue: BigNumberish;
    maxOverwrites: BigNumberish;
    maxTotalCost: BigNumberish;
    minTotalCost: BigNumberish;
    costExponent: BigNumberish;
  };

  export type VoteOptionsStructOutput = [
    uniqueValues: boolean,
    maxCount: bigint,
    maxValue: bigint,
    minValue: bigint,
    maxOverwrites: bigint,
    maxTotalCost: bigint,
    minTotalCost: bigint,
    costExponent: bigint
  ] & {
    uniqueValues: boolean;
    maxCount: bigint;
    maxValue: bigint;
    minValue: bigint;
    maxOverwrites: bigint;
    maxTotalCost: bigint;
    minTotalCost: bigint;
    costExponent: bigint;
  };

  export type ProposalOptionsStruct = {
    envelopeType: BigNumberish;
    proposalMode: BigNumberish;
    startTime: BigNumberish;
    duration: BigNumberish;
    status: BigNumberish;
    voteOptions: ProposalRegistry.VoteOptionsStruct;
  };

  export type ProposalOptionsStructOutput = [
    envelopeType: bigint,
    proposalMode: bigint,
    startTime: bigint,
    duration: bigint,
    status: bigint,
    voteOptions: ProposalRegistry.VoteOptionsStructOutput
  ] & {
    envelopeType: bigint;
    proposalMode: bigint;
    startTime: bigint;
    duration: bigint;
    status: bigint;
    voteOptions: ProposalRegistry.VoteOptionsStructOutput;
  };

  export type CensusStruct = {
    censusOrigin: BigNumberish;
    maxCensusSize: BigNumberish;
    censusRoot: BytesLike;
    censusURI: string;
  };

  export type CensusStructOutput = [
    censusOrigin: bigint,
    maxCensusSize: bigint,
    censusRoot: string,
    censusURI: string
  ] & {
    censusOrigin: bigint;
    maxCensusSize: bigint;
    censusRoot: string;
    censusURI: string;
  };

  export type ProposalStruct = {
    status: BigNumberish;
    organizationId: BytesLike;
    encryptionKeys: [BytesLike, BytesLike];
    latestStateRoot: BytesLike;
    result: BigNumberish[][];
    startTime: BigNumberish;
    duration: BigNumberish;
    metadataURI: string;
    options: ProposalRegistry.ProposalOptionsStruct;
    census: ProposalRegistry.CensusStruct;
  };

  export type ProposalStructOutput = [
    status: bigint,
    organizationId: string,
    encryptionKeys: [string, string],
    latestStateRoot: string,
    result: bigint[][],
    startTime: bigint,
    duration: bigint,
    metadataURI: string,
    options: ProposalRegistry.ProposalOptionsStructOutput,
    census: ProposalRegistry.CensusStructOutput
  ] & {
    status: bigint;
    organizationId: string;
    encryptionKeys: [string, string];
    latestStateRoot: string;
    result: bigint[][];
    startTime: bigint;
    duration: bigint;
    metadataURI: string;
    options: ProposalRegistry.ProposalOptionsStructOutput;
    census: ProposalRegistry.CensusStructOutput;
  };
}

export interface ProposalRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "chainID"
      | "endProposal"
      | "getProposal"
      | "initialize"
      | "newProposal"
      | "organizationRegistry"
      | "owner"
      | "proposalCount"
      | "proposals"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setProposalCensus"
      | "setProposalDuration"
      | "setProposalResult"
      | "setProposalStatus"
      | "submitStateTransition"
      | "transferOwnership"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CensusUpdated"
      | "Initialized"
      | "OwnershipTransferred"
      | "ProposalCreated"
      | "ProposalDurationChanged"
      | "ProposalStateRootUpdated"
      | "ProposalStatusChanged"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chainID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "endProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newProposal",
    values: [
      ProposalRegistry.ProposalOptionsStruct,
      ProposalRegistry.CensusStruct,
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "organizationRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalCensus",
    values: [BytesLike, ProposalRegistry.CensusStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalDuration",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalResult",
    values: [BytesLike, BigNumberish[][], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalStatus",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitStateTransition",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organizationRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalCensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitStateTransition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace CensusUpdatedEvent {
  export type InputTuple = [
    proposalID: BytesLike,
    censusRoot: BytesLike,
    censusURI: string,
    maxCensusSize: BigNumberish
  ];
  export type OutputTuple = [
    proposalID: string,
    censusRoot: string,
    censusURI: string,
    maxCensusSize: bigint
  ];
  export interface OutputObject {
    proposalID: string;
    censusRoot: string;
    censusURI: string;
    maxCensusSize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [proposalID: BytesLike, creator: AddressLike];
  export type OutputTuple = [proposalID: string, creator: string];
  export interface OutputObject {
    proposalID: string;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalDurationChangedEvent {
  export type InputTuple = [proposalID: BytesLike, duration: BigNumberish];
  export type OutputTuple = [proposalID: string, duration: bigint];
  export interface OutputObject {
    proposalID: string;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalStateRootUpdatedEvent {
  export type InputTuple = [proposalID: BytesLike, newStateRoot: BytesLike];
  export type OutputTuple = [proposalID: string, newStateRoot: string];
  export interface OutputObject {
    proposalID: string;
    newStateRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalStatusChangedEvent {
  export type InputTuple = [proposalID: BytesLike, newStatus: BigNumberish];
  export type OutputTuple = [proposalID: string, newStatus: bigint];
  export interface OutputObject {
    proposalID: string;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProposalRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ProposalRegistry;
  waitForDeployment(): Promise<this>;

  interface: ProposalRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  chainID: TypedContractMethod<[], [string], "view">;

  endProposal: TypedContractMethod<
    [_proposalID: BytesLike],
    [void],
    "nonpayable"
  >;

  getProposal: TypedContractMethod<
    [_proposalID: BytesLike],
    [ProposalRegistry.ProposalStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<
    [_chainID: string, _organizationRegistry: AddressLike],
    [void],
    "nonpayable"
  >;

  newProposal: TypedContractMethod<
    [
      _options: ProposalRegistry.ProposalOptionsStruct,
      _census: ProposalRegistry.CensusStruct,
      _metadata: string,
      _organizationID: BytesLike,
      _proposalID: BytesLike,
      _encryptionPubKey: BytesLike,
      _initStateRoot: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  organizationRegistry: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        string,
        ProposalRegistry.ProposalOptionsStructOutput,
        ProposalRegistry.CensusStructOutput
      ] & {
        status: bigint;
        organizationId: string;
        latestStateRoot: string;
        startTime: bigint;
        duration: bigint;
        metadataURI: string;
        options: ProposalRegistry.ProposalOptionsStructOutput;
        census: ProposalRegistry.CensusStructOutput;
      }
    ],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setProposalCensus: TypedContractMethod<
    [_proposalID: BytesLike, _census: ProposalRegistry.CensusStruct],
    [void],
    "nonpayable"
  >;

  setProposalDuration: TypedContractMethod<
    [_proposalID: BytesLike, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProposalResult: TypedContractMethod<
    [_proposalID: BytesLike, _result: BigNumberish[][], _proof: BytesLike],
    [void],
    "nonpayable"
  >;

  setProposalStatus: TypedContractMethod<
    [_proposalID: BytesLike, _newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitStateTransition: TypedContractMethod<
    [
      _proposalID: BytesLike,
      _oldRoot: BytesLike,
      _newRoot: BytesLike,
      _proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "chainID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "endProposal"
  ): TypedContractMethod<[_proposalID: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [_proposalID: BytesLike],
    [ProposalRegistry.ProposalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_chainID: string, _organizationRegistry: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "newProposal"
  ): TypedContractMethod<
    [
      _options: ProposalRegistry.ProposalOptionsStruct,
      _census: ProposalRegistry.CensusStruct,
      _metadata: string,
      _organizationID: BytesLike,
      _proposalID: BytesLike,
      _encryptionPubKey: BytesLike,
      _initStateRoot: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "organizationRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        string,
        ProposalRegistry.ProposalOptionsStructOutput,
        ProposalRegistry.CensusStructOutput
      ] & {
        status: bigint;
        organizationId: string;
        latestStateRoot: string;
        startTime: bigint;
        duration: bigint;
        metadataURI: string;
        options: ProposalRegistry.ProposalOptionsStructOutput;
        census: ProposalRegistry.CensusStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProposalCensus"
  ): TypedContractMethod<
    [_proposalID: BytesLike, _census: ProposalRegistry.CensusStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProposalDuration"
  ): TypedContractMethod<
    [_proposalID: BytesLike, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProposalResult"
  ): TypedContractMethod<
    [_proposalID: BytesLike, _result: BigNumberish[][], _proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProposalStatus"
  ): TypedContractMethod<
    [_proposalID: BytesLike, _newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitStateTransition"
  ): TypedContractMethod<
    [
      _proposalID: BytesLike,
      _oldRoot: BytesLike,
      _newRoot: BytesLike,
      _proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "CensusUpdated"
  ): TypedContractEvent<
    CensusUpdatedEvent.InputTuple,
    CensusUpdatedEvent.OutputTuple,
    CensusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalDurationChanged"
  ): TypedContractEvent<
    ProposalDurationChangedEvent.InputTuple,
    ProposalDurationChangedEvent.OutputTuple,
    ProposalDurationChangedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalStateRootUpdated"
  ): TypedContractEvent<
    ProposalStateRootUpdatedEvent.InputTuple,
    ProposalStateRootUpdatedEvent.OutputTuple,
    ProposalStateRootUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalStatusChanged"
  ): TypedContractEvent<
    ProposalStatusChangedEvent.InputTuple,
    ProposalStatusChangedEvent.OutputTuple,
    ProposalStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "CensusUpdated(bytes32,bytes32,string,uint256)": TypedContractEvent<
      CensusUpdatedEvent.InputTuple,
      CensusUpdatedEvent.OutputTuple,
      CensusUpdatedEvent.OutputObject
    >;
    CensusUpdated: TypedContractEvent<
      CensusUpdatedEvent.InputTuple,
      CensusUpdatedEvent.OutputTuple,
      CensusUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProposalCreated(bytes32,address)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalDurationChanged(bytes32,uint256)": TypedContractEvent<
      ProposalDurationChangedEvent.InputTuple,
      ProposalDurationChangedEvent.OutputTuple,
      ProposalDurationChangedEvent.OutputObject
    >;
    ProposalDurationChanged: TypedContractEvent<
      ProposalDurationChangedEvent.InputTuple,
      ProposalDurationChangedEvent.OutputTuple,
      ProposalDurationChangedEvent.OutputObject
    >;

    "ProposalStateRootUpdated(bytes32,bytes32)": TypedContractEvent<
      ProposalStateRootUpdatedEvent.InputTuple,
      ProposalStateRootUpdatedEvent.OutputTuple,
      ProposalStateRootUpdatedEvent.OutputObject
    >;
    ProposalStateRootUpdated: TypedContractEvent<
      ProposalStateRootUpdatedEvent.InputTuple,
      ProposalStateRootUpdatedEvent.OutputTuple,
      ProposalStateRootUpdatedEvent.OutputObject
    >;

    "ProposalStatusChanged(bytes32,uint8)": TypedContractEvent<
      ProposalStatusChangedEvent.InputTuple,
      ProposalStatusChangedEvent.OutputTuple,
      ProposalStatusChangedEvent.OutputObject
    >;
    ProposalStatusChanged: TypedContractEvent<
      ProposalStatusChangedEvent.InputTuple,
      ProposalStatusChangedEvent.OutputTuple,
      ProposalStatusChangedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
